+++++++++++++++++++++++
   TYPE INFORMATION
+++++++++++++++++++++++

RTTI(run-time type identification) - механизм динамического определения типов, который
позволяет получить и использовать информацию о типах во время выполнения программы.

Вообще судествует два способа извлечения информации о типе, это RTTI, так же
reflection - механизм отражения во время выполнения программы.

==============================================
Необходимость в динамическом определении типов
The need for dynamic type determination
==============================================
determination - определение

Рассмотрим пример:
Иерархия классов этого примера использует полиморфизм.
Базовым классом является Shape(фигура).
Производными классами являются Triangle, Circle, Square
Создаем объектр конкретного класса(Triange, Circle, Square)
производим восходящее преоразование к фигуре Shape и используем
ссылка на безымянную фигуру
    Пример:
        C:\Users\tony\IdeaProjects\filosofiaJava\src\typeInformations\Shapes.java


В каждом классе имеется статический блок, который отработат один раз при первой загрузке класса
В методе main() создаются объкты, чередуясь выводами на экран сообщений для правильного определения
загрузки класса.
Каждый объект Class загружается только если есть в этом необходимость, а "статическая"
инициализация происходит при загрузке этого объекта.

Class.forName("Gum") - это вызов статического метода класса Class. МОжем создавать его
и манипулировать ссылками на него.
Один из способов получения ссылки на объект Class - вызвать метод forName(), передав
ему в качестве аргумента строку String c именем определенного класса. Этот метод
возвращает ссылку на объект типа Class, которая игнорировалась.В процессе загрузки
выполняется static-инициализатор класса Gum.
В примере, если бы метод Class.forName() завершился неудачей(не смог найти класс,
который хотели загрузить), он возбудил бы исключение ClassNotFoundException.
Если хотим получить информацию о типе во время выполнения, сначала нужно получить
ссылку на соответствующий объект Class. Для этого лучше использовать  метод
Class.forName(), потому что для получения ссылки на Class объект не нужен.
Но если имеется объект интересующего типа, для получения ссылки на Class можно
вызвать метод, являющийся частью корневого класса Object - getClass(). Метод возвращает
ссылку на объект Class, представляющий фактический тип объекта.

Class содержит много интересных методов, вот несколько из них:
    Пример:
        C:\Users\tony\IdeaProjects\filosofiaJava\src\typeInformations\ToyTest.java
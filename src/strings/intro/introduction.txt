================
Line consistincy
================
consistency - постоянство

Объекты класса String постоянны(immutable)
Каждый метод класса, изменяющий String, в действительности создает и возвращает
новый объект String с включенными изменениями.
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Immutable.java

=======================
Overload + StringBuilder
=======================
Объект String не модифицируется, можно создать сколько угодно синонимов.
String доступен только для чтения, одна ссылка не изменит данные, используемые
по другим ссылкам.
Оператор + был перегружен для объектов String. Перегрузкой называется изменение
 смысла оператора при его использовании с конкретным классом. Перегрузка операторов
 ограничивается операторами + и += для класса String.
Оператор + может использоваться для конкатенации объектов String.
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Concatenation.java

    Для понимания можно декомпилировать приведенный код с помощью
    javap -c
    флаг -с генерирует байт-код Java

     public static void main(java.lang.String[]);
        Code:
           0: ldc           #2                  // String mango
           2: astore_1
           3: new           #3                  // class java/lang/StringBuilder
           6: dup
           7: invokespecial #4                  // Method java/lang/StringBuilder."<init>"
    :()V
          10: ldc           #5                  // String abs
          12: invokevirtual #6                  // Method java/lang/StringBuilder.append:(
    Ljava/lang/String;)Ljava/lang/StringBuilder;
          15: aload_1
          16: invokevirtual #6                  // Method java/lang/StringBuilder.append:(
    Ljava/lang/String;)Ljava/lang/StringBuilder;
          19: ldc           #7                  // String def
          21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(
    Ljava/lang/String;)Ljava/lang/StringBuilder;
          24: bipush        47
          26: invokevirtual #8                  // Method java/lang/StringBuilder.append:(
    I)Ljava/lang/StringBuilder;
          29: invokevirtual #9                  // Method java/lang/StringBuilder.toString
    :()Ljava/lang/String;
          32: astore_2
          33: getstatic     #10                 // Field java/lang/System.out:Ljava/io/Pri
    ntStream;
          36: aload_2
          37: invokevirtual #11                 // Method java/io/PrintStream.println:(Lja
    va/lang/String;)V
          40: return

Компилятор создает объект StringBuilde для построения String s, после чего
вызывает append() 4 раза , по одному для каждого фрагмента. В завершении он вызывает
метод toString для получения результата и сохраняет его(команда astore_2) под
именем S

В следующем примере результат String создается двумя способами: с помощью String
и ручной релизацией, использующей StringBuilder.
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\WitherStringBuilder.java

   Таким образом при создании метода toString() выполняются простые операции, в которых
   компилятор может разобраться самостоятельно. Но если в вычислениях задействован цикл
   лучше испльзовать StringBuilder в toString()

   Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\UsingStringBuilder.java

  Класс StringBuilder содержит методы insert(), replace(), substring() и reverse(), но
  чаще всего исльзуются методы append() и toString().
  Из последнего примера метод delete() удаляет последнюю запятую и пробел перед
  закрывающейся скобкой

=====================
Unintention recursion
=====================
unintention - непреднамеренная
Стандартные контейнеры и все остальные классы наследуются от Object, они содержат метод toString.
Этот метод переопределен чтобы контейнеры могли выдвать свое представление в формате String,
включающее данные о хранящихся в них объектах.
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\ArrayListDisplay.java

    Допусти, хотим чтобы метод toString() выводил адрес объекта нашего класса
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\InfiniteRecursion.java

=================
String operations
=================
Все операции со строками представлены в таблице(Книга философия java) стр.№419

=================
Output formatting
=================

printf() - механизм форматирования  в виде команды. Мощное средство для управления
форматированием и выравниванием.
    Например:
        printf("Строка 1: [%d %f]\n",x,y);
х подставляется в %d
y подставляется весто %f
Эти заполнители называются форматными спецификаторами. Кроме обозначения позиции
они так же указывают какого рода переменная должна вставляться и как она должна
форматироваться.
%d - спецификатор, указывает, что х является целочисленной переменной
а
%f - спецификатор, указывает, что y является вещественным значением(float или double)

В JAVA SE5 появился новый метод, format()(эквивалент printf), доступный в объектах
PrintStream и PrintWrite. Так же существует вспомогательный метод printf(), который попросту
вызывает метод fromat()

    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\SimpleFormat.java

Форматы format() и printf() эквиваленты. Передается одна форматная строка, за
которой перечисляются аргументы  - по одному для каждого форматного спецификатора.

===============
Class Formatter
===============

Класс Formatter это преобразователь, приводящий форматну строку и данные к нужный
результат.При создании объекта Formatter мы сообщаем ему, куда следует выдать
результат, передавая эту информацию конструктору:
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Turtl.java

================
Format specifier
================
Синтаксис управления интервалами и выравниванием вставляемых данных:
    %[аргумент_индекс][флаги][ширина][.точность]преобразование

        [ширина]-спецификатор, управляющий минимальным размером поля. При необходимости
        объект Formatter гарантирует, что данные дополняются пробелами. По умолчанию
        данные выравниваются по правому краю, но тип выравнивания можно переопределить,
        ключив символ в секцию [флаги]
        [точность]-спецификатор, задает максимальное значение. Для объектов String
        точность задает количество выводимых символов, для вещественных чисел точноть
        задает количество выводимых сив=мволов, с округлением или добавлением завершающих
        нулей в случае необходимости. Точность не распространяется на целые числа и применение
        спецификатора [точность] возбудит исключение.

    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Receipt.java


=========================
Transformations Formatter
=========================
d - целое число(десятичное)
с - символ Юникод
b - логическое значение
s - строка
f - вещественное число(в десятичной записи)
e - вещественное число(в экспоненциальной записи)
x - целое число(шестнадцатеричное)
h - хэш код(в шестнадцатеричной записи)
% - литерал "%"

Примеры использования этих преобразований:
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Conversion.java

===============
String.format()
===============

Статический метод String.format() получает те же аргументы, что и метод format()
класса Formatter, но возвращает String. Метод может пригодится когда его нужно
вызвать всего один раз.
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\DatabaseException.java

==========================
file output in hexadecimal
==========================
Частно возникает необходимость просмотра содержимого двоичного
файла в шестнадцатеричном формате.
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Hex.java

==================
Regular Expression
==================
Регулярные выражения - мощный и гибкий инструмент обработки текстов. Он позволяет
определять на программном уровне сложные шаблоны для поиска текста во входной строке.
Обнаружив совпадение для шаблона, вы можете обратотать его так, как считаете нужным.

=========
The basic
=========
Регулярные выражения предназначены для обощеного описания строк по принципу:
"Если строк содержит такие-то элементы, то в ней находится совпадение для иско
мго криетрия".
Пример:
    "-?" означает что перед числом может стоятб знак "-"(но его может не быть),
    вы включаете в условие поиска знак "-" за которым следует знак "?"

    Целое число описывается как последовательной из одной или нескольких цифр.
    В регулярных выражениях цифра обозначается комбинацией \d.
    Для вставки литеральго символа используется "////"
    Для обозначения новой строки и табуляци иельзуется только одна косая черта "\n\t".
    Для описания одного или нескольких повторений предшествующего выражения
    используется знак "+"
Пример описания выражения нескольких цифр:
    "-?\\d+"
Простейший вариант использования регулярных выражений основа на функциональности
класса String

    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\IntegerMatch.java
Еще один полезный инструмент, встроенный в String - метод split(). Разбивает строку на
совпадения заданного регулярного выражения.
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Splitting.java

Переграженная версия String.split() позволяет ограничить количество разьиений
Последний инструмент, связанный с регулярными выражениями - замена.
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Replasing.java

Регулярные выражения обладают мощными средствами замены. Регулярны выражения не привязаные к
String так же работаю эффективнее, если регулярное выражение должно использоваться
многократно.

===========================
Creating regular expression
===========================
Список конструкций используемых при построении регулярных выражений - стр 432
Несколько типичных способов создания символьных классов, а так же заранее
определенные классы - стр 432
За полным списком шаблонов можно обратиться к документации JDK, java.util.regex.Pattern

    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Rudolph.java

При написании регулярных выражений нужно стремиться писать самое простое регулярное
выражение, решающее задачу.

==========
Qantifiers
==========
Квантификатор описывает режими поглощения входного текста шаблоном:
- Максимальные квантификаторы используются по умолчанию. В этом ржеми для выражения
подбирается максимально возможное количество возможных совпадений. Механизм регулярных
выражений позволяет двигаться вперед, пока не подберет возможное совпадение
максимальной длины.
- Минимальный квантификатор(задается вопосительным знаком) старается ограничиться
минимальным количеством символов, необходимых для соответствия шаблону.
- Захватывающие квантификаторы(используются только в Java). При применении
регулярного выражения в строке генерируются множественные состояния для возврата
в случае неудачи при поиске.Захватывающие квантификаторы не поддерживают
промежуточные состояния что предотвращает возврат и может способствовать повышению
эффективности.
Таблица режимов квантификаторов - стр 434

Выражение Х часто заключается в круглые скобки по причине, пример:
выражение abc+ совпадает с последовательностью символов "abc" один и более раз,
а при применении его к входной строке "abcabcabc" получим 3 совпадения.
В действительности же означает: найти совпадение ab за которой следует один или
несколько вхождений "с".
Вывод, для того чтобы найти совпадение для всей строки abc следует использовать
запись (abc)+

============
CharSequence
============
Интерфейс CharSequence устанавливает обощенное определение последовательности символов
, выделенной в классе CharBuffer, String, StringBuffer, StringBuilder

    interface CharSequence{
        carAt(int i);
        length();
        subSequence(int start, int end);
        toString();
    }
Перечисленные классы реализуют этот интерфейс. Многие операции регулярных выражений получают
аргументы CharSequence

=================
Pattern и Matcher
=================
Следует компилировать объекты регулярных выражений вместо использования ограниченных
возможностей String. Для этого нужно импортировать java.util.regex и затем откомпилировать
 регулярное выражение статическим методом Pattern.compile. В результате на базе
 аргуемента String создается объект Pattern. Чтобы использовать этот объект нужно вызвать
  метод matcher() и передать строку, в которой ведется поиск. Метод matcher() создает объект
 Matcher() с набором операций.Пример опрации - метоод replaceAll() заменяет все совпадения
 своим аргументом.
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\TestRegularExpression.java
Объект Pattern имеет откомпилированную версию регулярного выражения.
Метод mutcher() и входная строка используется создания объекта Matcher на базе
откомпилированого обхъекта Pattern.
Класс Pattern так имеет статический метод
    static boolend matches( String regex, CharSquence input) для проверки сопадения
        регулярного выжения regex со входной последовательностью CharSequence и методом split
        который создает массив String, полученных разбиением строки по совпадению регулярного
        выражения.
    Объект Matcher генерируется методом Pattern.matcher() получающий в аргументе командную строку.
    Затем объект Matcher используется для обращения к результатам; для проверки успеха или
    неудачи при различных типах совпадений используются меоды:

    boolen matches() - метод выолняет успешную проверки, усли шаблон совпадает со
    всей входной строкой
    boolean loockingAt() - метод успешен, если совпадение находится в начале области
    boolean fing() - метод, предпринимающий попытку поиска следующей последовательности
    соответствующей шаблону.
    boolen fing(int start) - метод сброса данного поиска соответствия и попытка поиска новой последовательности
    в вводимой последовательности, соответствующей шаблону с указанного индекса


======
find()
======
Метод Matches.find() используется для поиска множественных совпадений шаблона в
объекте CharSequence, к которому он применяется.
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Finding.java

=====
Group
=====
Группа - часть регулярного выражения, заключенная в круглые скобки, к которой можно
образаться по номеру группы.Группа 0 соответствует всему выражению, группа 1 - совпадению первого
выражения в крыглых скобках и т.д.
    Пример:
        A(B(C))D
            группа 0 - ABCD
            группа 1 - BC
            группа 2 - С
Объект Matcher() содержит методы для получения информации о группах:
    public int groupCount()-возвращает количество групп в шаблоне оъекта MAtcher
    public String group()-возвращает группу 0(все совпадения) от предыдущих операций совпадения find()(например)
    public int start(int group)-возвращает начальный индекс группы, найденной в предыдущей опрации посика совпадений
    public int end(int group)-назначает индекс последнего символа группы, найднной в предыдущей версии операции поиска совпадения, увеличенный на 1

    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Groups.java

=================
start() end end()
=================
start() - метод возвращает начальный индекс предыдущего совпадения
end() - метод возвращает последний символ совпадения, увеличеный на 1.
вызовы методов возбуждает исключение IllegalStateException
    Пример:
       C:\Users\tony\IdeaProjects\filosofiajava\src\strings\StartEnd.java

=============
Pattern Flags
=============
Альтернативный метод compile() получает флаги, управляющие процессом поисква совпадений:
    Pattern.compile(String regex, int flag)
Таблица констант класса Pattern, которые принимают зачение flag представлены
в таблице на странице 440 книгю.
Поведение флагов может быть представлено символами в круглых скобках перед той позицией
в которой должен включаться заданный режим. Флаги могут объединяться оперцией |(ИЛИ)
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\ReFlag.java

=====
split
=====
split()-метод, разбивает входную строку по совпадениям регулярного выражения и
создает массив объектов String:

String[] split(CharSequence input)
String[] split(CharSequence input, int limit)

    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\SplitDemo.java

======================
Replecement operations
======================
Регулярные выражения особенно полезны при замене текста.
replaceFirst(String replacement) - метод, заменяет первое совпадение строкой replacement
replacementAll(string replacement) - заменяет все совпадения строкой replacement
appendReplacement(StringBuffer sbuf, String replacement) - метод, выполняющий
пошаговые замены в sbuf. Метод особенно полезен так как позволяет вызыватьь методы и выполнять
другие операции для получения replacement()
appendTail(StringBuffer sbuf, String replacement) - метод вызывается после одного
или нескольких вызовов метода appendReplace() для копирования остатка входной строки
    Пример:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\TheReplacements.java

=======
reset()
=======
Существующий объект Matcher может быть применен к новой символьной последовательности
методами reset()
    Привет:
        C:\Users\tony\IdeaProjects\filosofiajava\src\strings\Resetting.java

==================================
Regular expressions and io in Java
==================================
В примерах ранее применялись регулярные выражения к статическим строкам.
Демонстрация примера регулярных выражений для поиска совпадений в файле.
    Пример:
        C:\Users\work\Desktop\java\filosofiaJava\src\strings\JGrep.java

=========
line scan
=========
Раньше считалось хлопотным делом читать данные из текстого файла. Программа читала
кажду строку файла, разбивала на лексемы и использовала разные методы классов(Integer, String? Double и пр) для разбора данных
    Пример:
        C:\Users\tony\IdeaProjects\filosofiaJava\src\strings\SimpleRead.java

Появившийся в JAVA SE 5 класс Scanner ищьавил от сложности сканирования ввода
    Пример:
        C:\Users\tony\IdeaProjects\filosofiaJava\src\strings\BetterRead.java

Отличаются два примера тем что во втором примере отсутствует
try, так как Класс Scanner предполагает что IOException
говорит о конце входных данных и поглощает эти иключения

================
Scanner limiters
================
Конструктор класса Scanner разбивает входные данные(строки) по пропускам по умолчанию!
Возможно так же создать ограничитель в форме регулярного выражения
    Пример:
        C:\Users\tony\IdeaProjects\filosofiaJava\src\strings\ScannerDelimiter.java


=======================
Regular expression scan
=======================
Сканирование  ввода можно проводить по собственным шаблонам, это возможнасть
полезна при поиске более сложных данных
    Пример:

